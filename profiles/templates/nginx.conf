daemon off;
worker_processes  1;

events {
    worker_connections  1024;
    use epoll;
}

error_log       {{ parts['buildout'].directory }}/var/log/nginx/error.log;
pid  {{ parts['buildout'].directory }}/var/nginx.pid;


http {
    lua_package_path "{{ parts['buildout'].directory }}/resty_modules/lualib/?.lua;;";
    lua_package_cpath "{{ parts['buildout'].directory }}/resty_modules/lualib/?.so;;";
    proxy_intercept_errors on;
    server_names_hash_max_size 2048;

    client_body_temp_path /tmp/client_body;
    fastcgi_temp_path /tmp/fastcgi_temp;
    proxy_temp_path /tmp/proxy_temp;
    scgi_temp_path /tmp/scgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    default_type  application/octet-stream;

    include /etc/nginx/mime.types;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;

    gzip_comp_level 2;
    gzip_proxied    any;
    gzip_types      text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;


    server {
        root {{ root }};
        listen       {{ port }};
        server_name  {{ server_name }};
        error_log       {{ parts['buildout'].directory }}/var/log/nginx/error.log;
        access_log       {{ parts['buildout'].directory }}/var/log/nginx/access.log;

        location ~ ^/{{ static_path }}/\.(css|js)$ {
            try_files $uri  /$uri;
        }

        location ~* ^/({{ parts['project'].auction_routes }})/([0-9a-zA-Z_]+)/(?<pass_uri>.+)$ {
            gzip   off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            error_page 502 = @fallback;
            set $target '';
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Host $http_host;
            access_by_lua_block {
                 redis_url = "sentinel://12345@redis-cluster:m/0"
                 sentinels = {{ '{{' }} host= "127.0.0.1", port = 9007}, }
                 require("smart_proxy").get_proxy_path("http", redis_url, sentinels)
            }
            proxy_pass $target;
            proxy_buffering off;
            proxy_cache off;
        }

        location ~* ^/{{ auctions_path }}/([0-9a-zA-Z_]+)$ {
            try_files $uri  $uri/ /{{ html_main }};
        }


        location ^~ /get_current_server_time {
            include {{ parts['buildout'].directory}}/etc/api.proxy.conf;
        }

        location /{{ parts['project'].auctions_couchdb_databese_name }} {
            proxy_pass      http://{{ parts['project'].couchdb_host }}:{{ parts['couchdb.ini'].port }};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
        }

	location  /{{ parts['project'].auctions_couchdb_databese_name }}/_changes {
	    rewrite /{{ parts['project'].auctions_couchdb_databese_name }}/(.*) /$1 break;
            proxy_pass      http://{{ parts['proxy.ini'].host }}:{{ parts['proxy.ini'].port }};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;

	}

        location ~* ^/health$ {
            include {{ parts['buildout'].directory}}/etc/api.proxy.conf;
        }

        location ~* ^/log$ {
            include {{ parts['buildout'].directory}}/etc/api.proxy.conf;
        }

        location ~* ^/archive$ {
            try_files $uri  $uri/ /{{ html_archive }};
        }

        location / {
            index  /{{ html_index }};
        }

        location @fallback {
                return 404;
        }

        {% for plugin in plugins.split(',') %}
        include {{ parts['buildout'].directory}}/etc/{{ plugin }}.conf;
        {% endfor%}

        error_page   500 502 503 504  /50x.html;
    }
}
